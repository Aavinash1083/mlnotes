<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aavinash</title>
    <link>https://aavinash1083.github.io/mlnotes/</link>
    <description>Recent content on Aavinash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aavinash1083.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3D_Scatter_plot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/3d_scatter_plot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/3d_scatter_plot/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npfrom mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt from matplotlib import stylestyle.use(&amp;#39;fivethirtyeight&amp;#39;) fig = plt.figure() ax1 = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;) x = [1,2,3,4,5,6,7,8,9,10] y = [5,6,7,8,2,5,6,3,7,2] z = [1,2,6,3,2,7,3,3,7,2] ax1.plot(x,y,z) ax1.set_xlabel(&amp;#39;x axis&amp;#39;) ax1.set_ylabel(&amp;#39;y axis&amp;#39;) ax1.set_zlabel(&amp;#39;z axis&amp;#39;) plt.show() from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt from matplotlib import stylestyle.use(&amp;#39;ggplot&amp;#39;) fig = plt.figure() ax1 = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;) x = [1,2,3,4,5,6,7,8,9,10] y = [5,6,7,8,2,5,6,3,7,2] z = [1,2,6,3,2,7,3,3,7,2] x2 = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10] y2 = [-5,-6,-7,-8,-2,-5,-6,-3,-7,-2] z2 = [1,2,6,3,2,7,3,3,7,2] ax1.</description>
    </item>
    
    <item>
      <title>Bar_chart</title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/bar_chart/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/bar_chart/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npplt.bar([1,3,5,7,9],[5,2,7,8,2], label=&amp;#34;Example one&amp;#34;) plt.bar([2,4,6,8,10],[8,6,2,5,6], label=&amp;#34;Example two&amp;#34;, color=&amp;#39;g&amp;#39;) plt.legend() plt.xlabel(&amp;#39;bar number&amp;#39;) plt.ylabel(&amp;#39;bar height&amp;#39;) plt.title(&amp;#39;Epic Graph\nAnother Line! Whoa&amp;#39;) plt.show()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    names jan_ir feb_ir march_ir     0 Nick 123 23 3   1 Sani 124 24 5   2 John 125 25 7   3 Rubi 126 27 6   4 Maya 128 29 9     korea_scores=(554,536,538) canada_scores=(518,523,525) china_scores=(413,570,580) franch_scores=(495,505,499) index=np.</description>
    </item>
    
    <item>
      <title>Barplot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/seaborn/barplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/seaborn/barplot/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inlinedata = pd.read_csv(&amp;#39;Whatsapp_chat.csv&amp;#39;, index_col=0) data  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    hours days months names timestamp     0 1 19 May Person4 2020-05-19   1 22 19 May Person3 2020-05-19   2 22 19 May Person3 2020-05-19   3 22 19 May Person1 2020-05-19   4 22 19 May Person3 2020-05-19   .</description>
    </item>
    
    <item>
      <title>Countplot </title>
      <link>https://aavinash1083.github.io/mlnotes/python/seaborn/countplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/seaborn/countplot/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inlinedata = pd.read_csv(&amp;#39;Whatsapp_chat.csv&amp;#39;, index_col=0) data  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    hours days months names timestamp     0 1 19 May Person4 2020-05-19   1 22 19 May Person3 2020-05-19   2 22 19 May Person3 2020-05-19   3 22 19 May Person1 2020-05-19   4 22 19 May Person3 2020-05-19   .</description>
    </item>
    
    <item>
      <title>GGplot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/ggplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/ggplot/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npfrom mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt import numpy as np from matplotlib import stylestyle.use(&amp;#39;ggplot&amp;#39;) fig = plt.figure() ax1 = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;) x3 = [1,2,3,4,5,6,7,8,9,10] y3 = [5,6,7,8,2,5,6,3,7,2] z3 = np.zeros(10) dx = np.ones(10) dy = np.ones(10) dz = [1,2,3,4,5,6,7,8,9,10] ax1.bar3d(x3, y3, z3, dx, dy, dz) ax1.set_xlabel(&amp;#39;x axis&amp;#39;) ax1.set_ylabel(&amp;#39;y axis&amp;#39;) ax1.set_zlabel(&amp;#39;z axis&amp;#39;) plt.show() fig = plt.figure() ax1 = fig.</description>
    </item>
    
    <item>
      <title>Heatmap</title>
      <link>https://aavinash1083.github.io/mlnotes/python/seaborn/heatmap/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/seaborn/heatmap/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inlinedata = pd.read_csv(&amp;#39;Whatsapp_chat.csv&amp;#39;, index_col=0) data  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    hours days months names timestamp     0 1 19 May Person4 2020-05-19   1 22 19 May Person3 2020-05-19   2 22 19 May Person3 2020-05-19   3 22 19 May Person1 2020-05-19   4 22 19 May Person3 2020-05-19   .</description>
    </item>
    
    <item>
      <title>Learning_and_predicting</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/learning_and_predicting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/learning_and_predicting/</guid>
      <description>from sklearn import datasets iris = datasets.load_iris() digits = datasets.load_digits()print(digits.data) [[ 0. 0. 5. ... 0. 0. 0.] [ 0. 0. 0. ... 10. 0. 0.] [ 0. 0. 0. ... 16. 9. 0.] ... [ 0. 0. 1. ... 6. 0. 0.] [ 0. 0. 2. ... 12. 0. 0.] [ 0. 0. 10. ... 12. 1. 0.]]  digits.target array([0, 1, 2, ..., 8, 9, 8])  from sklearn import svm clf = svm.</description>
    </item>
    
    <item>
      <title>Lineplot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/seaborn/lineplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/seaborn/lineplot/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inlinedata = pd.read_csv(&amp;#39;Whatsapp_chat.csv&amp;#39;, index_col=0) data  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    hours days months names timestamp     0 1 19 May Person4 2020-05-19   1 22 19 May Person3 2020-05-19   2 22 19 May Person3 2020-05-19   3 22 19 May Person1 2020-05-19   4 22 19 May Person3 2020-05-19   .</description>
    </item>
    
    <item>
      <title>Loading_Datasets</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/loading_datasets/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/loading_datasets/</guid>
      <description>from sklearn import datasets iris = datasets.load_iris() digits = datasets.load_digits()print(digits.data) [[ 0. 0. 5. ... 0. 0. 0.] [ 0. 0. 0. ... 10. 0. 0.] [ 0. 0. 0. ... 16. 9. 0.] ... [ 0. 0. 1. ... 6. 0. 0.] [ 0. 0. 2. ... 12. 0. 0.] [ 0. 0. 10. ... 12. 1. 0.]]  digits.target array([0, 1, 2, ..., 8, 9, 8])  </description>
    </item>
    
    <item>
      <title>Model_Persistence</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/model_persistence/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/model_persistence/</guid>
      <description>from sklearn import datasets iris = datasets.load_iris() digits = datasets.load_digits()print(digits.data) [[ 0. 0. 5. ... 0. 0. 0.] [ 0. 0. 0. ... 10. 0. 0.] [ 0. 0. 0. ... 16. 9. 0.] ... [ 0. 0. 1. ... 6. 0. 0.] [ 0. 0. 2. ... 12. 0. 0.] [ 0. 0. 10. ... 12. 1. 0.]]  digits.target array([0, 1, 2, ..., 8, 9, 8])  from sklearn import svm clf = svm.</description>
    </item>
    
    <item>
      <title>Multilabel_fitting</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/multilabel_fitting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/multilabel_fitting/</guid>
      <description>from sklearn.svm import SVC from sklearn.multiclass import OneVsRestClassifier from sklearn.preprocessing import LabelBinarizerX = [[1, 2], [2, 4], [4, 5], [3, 2], [3, 1]] y = [0, 0, 1, 1, 2]classif = OneVsRestClassifier(estimator=SVC(random_state=0)) classif.fit(X, y).predict(X) array([0, 0, 1, 1, 2])  y = LabelBinarizer().fit_transform(y) classif.fit(X, y).predict(X) array([[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]])  from sklearn.preprocessing import MultiLabelBinarizer y = [[0, 1], [0, 2], [1, 3], [0, 2, 3], [2, 4]] y = MultiLabelBinarizer().</description>
    </item>
    
    <item>
      <title>Pie_chart </title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/pie_chart/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/pie_chart/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as nplabels=[&amp;#39;Python&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C++&amp;#39;,&amp;#39;PHP&amp;#39;,&amp;#39;Java&amp;#39;,&amp;#39;Ruby&amp;#39;] sizes=[33,52,12,17,42,48] separated=(.1,0,0,0,0,0) plt.pie(sizes,labels=labels,autopct=&amp;#39;%1.1f%%&amp;#39;,explode=separated) plt.axis(&amp;#39;equal&amp;#39;) plt.show() </description>
    </item>
    
    <item>
      <title>Piechart</title>
      <link>https://aavinash1083.github.io/mlnotes/python/seaborn/piechart/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/seaborn/piechart/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inlinedata = pd.read_csv(&amp;#39;Whatsapp_chat.csv&amp;#39;, index_col=0) data  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    hours days months names timestamp     0 1 19 May Person4 2020-05-19   1 22 19 May Person3 2020-05-19   2 22 19 May Person3 2020-05-19   3 22 19 May Person1 2020-05-19   4 22 19 May Person3 2020-05-19   .</description>
    </item>
    
    <item>
      <title>Population_Graph </title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/population_graph/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/population_graph/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npyears=[1,1000,1500,1600,1700,1750,1800,1850,1900,1950,1955,1960,1965,1970,1980,1985,1990, 1995,2000,2005,2010,2015] pops=[200,400,458,580,682,791,1000,1262,1650,2525,2758,3018,3322,3682, 4061,4440,4853,5310,5735,6127,6520,7349] plt.plot(years,pops) plt.show &amp;lt;function matplotlib.pyplot.show(close=None, block=None)&amp;gt;  years=[1950,1955,1960,1965,1970,1980,1985,1990,1995,2000,2005,2010,2015] pops=[2.5,2.7,3.0,3.3,3.6,4.0,4.4,4.8,5.3,5.7,6.1,6.5,7.3] plt.plot(years,pops,color=(255/255,100/255,100/255)) plt.ylabel(&amp;#34;Population in Billions&amp;#34;) plt.xlabel(&amp;#34;Population growth by year&amp;#34;) plt.title(&amp;#34;Population Growth&amp;#34;) plt.show &amp;lt;function matplotlib.pyplot.show(close=None, block=None)&amp;gt;  </description>
    </item>
    
    <item>
      <title>Python_addition</title>
      <link>https://aavinash1083.github.io/mlnotes/python/basics/python_addition/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/basics/python_addition/</guid>
      <description>print(9+9) 18  </description>
    </item>
    
    <item>
      <title>Refitting</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/refitting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/refitting/</guid>
      <description>import numpy as np from sklearn.datasets import load_iris from sklearn.svm import SVC X, y = load_iris(return_X_y=True)clf = SVC() clf.set_params(kernel=&amp;#39;linear&amp;#39;).fit(X, y) SVC(kernel=&#39;linear&#39;)  clf.predict(X[:5]) array([0, 0, 0, 0, 0])  clf.set_params(kernel=&amp;#39;rbf&amp;#39;).fit(X, y) SVC()  clf.predict(X[:5]) array([0, 0, 0, 0, 0])  </description>
    </item>
    
    <item>
      <title>Scatterplot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/scatterplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/scatterplot/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npx = [1,2,3,4,5,6,7,8] y = [5,2,4,2,1,4,5,2] plt.scatter(x,y, label=&amp;#39;skitscat Raggedy&amp;#39;, color=&amp;#39;k&amp;#39;, s=25, marker=&amp;#34;o&amp;#34;) plt.xlabel(&amp;#39;x&amp;#39;) plt.ylabel(&amp;#39;y&amp;#39;) plt.title(&amp;#39;Interesting Graph\nCheck it out&amp;#39;) plt.legend() plt.show() korea_scores=(554,536,538) canada_scores=(518,523,525) china_scores=(413,570,580) franch_scores=(495,505,499) index=np.arange(3) bar_width=.2 k1=plt.bar(index,korea_scores,bar_width,alpha=.9,label=&amp;#34;Korea&amp;#34;) c1=plt.bar(index+bar_width,canada_scores,bar_width,alpha=.9,label=&amp;#34;Canada&amp;#34;) ch1=plt.bar(index+bar_width*2,china_scores,bar_width,alpha=.9,label=&amp;#34;China&amp;#34;) f1=plt.bar(index+bar_width*3,franch_scores,bar_width,alpha=.9,label=&amp;#34;Franch&amp;#34;) plt.xticks(index+.6/2,(&amp;#39;Mathematics&amp;#39;,&amp;#39;Reading&amp;#39;,&amp;#39;Science&amp;#39;)) plt.ylabel(&amp;#39;Mean score in PISA in 2012&amp;#39;) plt.xlabel(&amp;#39;Subjects&amp;#39;) plt.title(&amp;#39;Test scores by Country&amp;#39;) plt.grid(True) plt.legend() plt.show() </description>
    </item>
    
    <item>
      <title>Stackplot</title>
      <link>https://aavinash1083.github.io/mlnotes/python/matplotlib/stackplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/matplotlib/stackplot/</guid>
      <description>import pandas as pd import matplotlib.pyplot as plt import numpy as npdays = [1,2,3,4,5] sleeping = [7,8,6,11,7] eating = [2,3,4,3,2] working = [7,8,7,2,2] playing = [8,5,7,8,13] plt.stackplot(days, sleeping,eating,working,playing, colors=[&amp;#39;m&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;k&amp;#39;]) plt.xlabel(&amp;#39;x&amp;#39;) plt.ylabel(&amp;#39;y&amp;#39;) plt.title(&amp;#39;Interesting Graph\nStack Plots&amp;#39;) plt.show() days = [1,2,3,4,5] sleeping = [7,8,6,11,7] eating = [2,3,4,3,2] working = [7,8,7,2,2] playing = [8,5,7,8,13] plt.plot([],[],color=&amp;#39;m&amp;#39;, label=&amp;#39;Sleeping&amp;#39;, linewidth=5) plt.plot([],[],color=&amp;#39;c&amp;#39;, label=&amp;#39;Eating&amp;#39;, linewidth=5) plt.plot([],[],color=&amp;#39;r&amp;#39;, label=&amp;#39;Working&amp;#39;, linewidth=5) plt.plot([],[],color=&amp;#39;k&amp;#39;, label=&amp;#39;Playing&amp;#39;, linewidth=5) plt.stackplot(days, sleeping,eating,working,playing, colors=[&amp;#39;m&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;k&amp;#39;]) plt.xlabel(&amp;#39;x&amp;#39;) plt.ylabel(&amp;#39;y&amp;#39;) plt.title(&amp;#39;Interesting Graph\nCheck it out&amp;#39;) plt.</description>
    </item>
    
    <item>
      <title>Type_casting</title>
      <link>https://aavinash1083.github.io/mlnotes/python/sklearn/type_casting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/sklearn/type_casting/</guid>
      <description>import numpy as np from sklearn import random_projection rng = np.random.RandomState(0) X = rng.rand(10, 2000) X = np.array(X, dtype=&amp;#39;float32&amp;#39;) X.dtype dtype(&#39;float32&#39;)  transformer = random_projection.GaussianRandomProjection() X_new = transformer.fit_transform(X) X_new.dtype dtype(&#39;float64&#39;)  from sklearn import datasets from sklearn.svm import SVC iris = datasets.load_iris() clf = SVC() clf.fit(iris.data, iris.target) SVC()  list(clf.predict(iris.data[:3])) [0, 0, 0]  clf.fit(iris.data, iris.target_names[iris.target]) SVC()  list(clf.predict(iris.data[:3])) [&#39;setosa&#39;, &#39;setosa&#39;, &#39;setosa&#39;]  </description>
    </item>
    
    <item>
      <title>Column_selection</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/column_selection/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/column_selection/</guid>
      <description>import pandas as pddata = pd.read_csv(&amp;#34;glass.csv&amp;#34;, index_col =&amp;#34;Type&amp;#34;)first = data[&amp;#34;Na&amp;#34;]print(first) Type 1 13.64 1 13.89 1 13.53 1 13.21 1 13.27 ... 7 14.14 7 14.92 7 14.36 7 14.38 7 14.23 Name: Na, Length: 214, dtype: float64  </description>
    </item>
    
    <item>
      <title>Creating_Dataframes</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/creating_dataframes/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/creating_dataframes/</guid>
      <description>import pandas as pdlst = [&amp;#39;Geeks&amp;#39;, &amp;#39;For&amp;#39;, &amp;#39;Geeks&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;portal&amp;#39;, &amp;#39;for&amp;#39;, &amp;#39;Geeks&amp;#39;] df = pd.DataFrame(lst)df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    0     0 Geeks   1 For   2 Geeks   3 is   4 portal   5 for   6 Geeks     data = {&amp;#39;Name&amp;#39;:[&amp;#39;Tom&amp;#39;, &amp;#39;nick&amp;#39;, &amp;#39;krish&amp;#39;, &amp;#39;jack&amp;#39;], &amp;#39;Age&amp;#39;:[20, 21, 19, 18]}df = pd.</description>
    </item>
    
    <item>
      <title>Dataframe_to_csv</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/dataframe_to_csv/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/dataframe_to_csv/</guid>
      <description>import pandas as pd nme = [&amp;#34;aparna&amp;#34;, &amp;#34;pankaj&amp;#34;, &amp;#34;sudhir&amp;#34;, &amp;#34;Geeku&amp;#34;] deg = [&amp;#34;MBA&amp;#34;, &amp;#34;BCA&amp;#34;, &amp;#34;M.Tech&amp;#34;, &amp;#34;MBA&amp;#34;] scr = [90, 40, 80, 98] dict = {&amp;#39;name&amp;#39;: nme, &amp;#39;degree&amp;#39;: deg, &amp;#39;score&amp;#39;: scr} df = pd.DataFrame(dict) df.to_csv(&amp;#39;file1.csv&amp;#39;) import pandas as pd nme = [&amp;#34;aparna&amp;#34;, &amp;#34;pankaj&amp;#34;, &amp;#34;sudhir&amp;#34;, &amp;#34;Geeku&amp;#34;] deg = [&amp;#34;MBA&amp;#34;, &amp;#34;BCA&amp;#34;, &amp;#34;M.Tech&amp;#34;, &amp;#34;MBA&amp;#34;] scr = [90, 40, 80, 98] dict = {&amp;#39;name&amp;#39;: nme, &amp;#39;degree&amp;#39;: deg, &amp;#39;score&amp;#39;: scr} df = pd.DataFrame(dict) df.to_csv(&amp;#39;file2.csv&amp;#39;, header=False, index=False) import pandas as pd nme = [&amp;#34;aparna&amp;#34;, &amp;#34;pankaj&amp;#34;, &amp;#34;sudhir&amp;#34;, &amp;#34;Geeku&amp;#34;] deg = [&amp;#34;MBA&amp;#34;, &amp;#34;BCA&amp;#34;, &amp;#34;M.</description>
    </item>
    
    <item>
      <title>Function_in_Dataframes</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/function_in_dataframes/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/function_in_dataframes/</guid>
      <description># Import pandas package  import pandas as pd # Function to add  def add(a, b, c): return a + b + c def main(): # create a dictionary with  # three fields each  data = { &amp;#39;A&amp;#39;:[1, 2, 3], &amp;#39;B&amp;#39;:[4, 5, 6], &amp;#39;C&amp;#39;:[7, 8, 9] } # Convert the dictionary into DataFrame  df = pd.DataFrame(data) print(&amp;#34;Original DataFrame:\n&amp;#34;, df) df[&amp;#39;add&amp;#39;] = df.apply(lambda row : add(row[&amp;#39;A&amp;#39;], row[&amp;#39;B&amp;#39;], row[&amp;#39;C&amp;#39;]), axis = 1) print(&amp;#39;\nAfter Applying Function: &amp;#39;) # printing the new dataframe  print(df) if __name__ == &amp;#39;__main__&amp;#39;: main()  Original DataFrame: A B C 0 1 4 7 1 2 5 8 2 3 6 9 After Applying Function: A B C add 0 1 4 7 12 1 2 5 8 15 2 3 6 9 18  # Import pandas package  import pandas as pd def normalize(x, y): x_new = ((x - np.</description>
    </item>
    
    <item>
      <title>Row_selection</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/row_selection/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/row_selection/</guid>
      <description>import pandas as pddata = pd.read_csv(&amp;#34;glass.csv&amp;#34;, index_col =&amp;#34;Type&amp;#34;)first = data.loc[&amp;#34;1&amp;#34;] second = data.loc[&amp;#34;7&amp;#34;] print(first, &amp;#34;\n\n\n&amp;#34;, second)  RI Na Mg Al Si K Ca Ba Fe Type 1 1.52101 13.64 4.49 1.10 71.78 0.06 8.75 0.0 0.00 1 1.51761 13.89 3.60 1.36 72.73 0.48 7.83 0.0 0.00 1 1.51618 13.53 3.55 1.54 72.99 0.39 7.78 0.0 0.00 1 1.51766 13.21 3.69 1.29 72.61 0.57 8.22 0.0 0.00 1 1.51742 13.27 3.</description>
    </item>
    
    <item>
      <title>Visualisations</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/visualisations/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/visualisations/</guid>
      <description>import numpy as np import pandas as pd df1 = pd.read_csv(&amp;#39;glass.csv&amp;#39;, index_col = 0) df1[&amp;#39;Type&amp;#39;].hist()  &amp;lt;AxesSubplot:&amp;gt;  import matplotlib.pyplot as plt plt.style.use(&amp;#39;ggplot&amp;#39;) df1[&amp;#39;Type&amp;#39;].hist()  &amp;lt;AxesSubplot:&amp;gt;  df1.plot.area(alpha = 0.4)  &amp;lt;AxesSubplot:xlabel=&#39;RI&#39;&amp;gt;  df1.plot.scatter(x =&amp;#39;Na&amp;#39;, y =&amp;#39;Type&amp;#39;)  &amp;lt;AxesSubplot:xlabel=&#39;Na&#39;, ylabel=&#39;Type&#39;&amp;gt;  </description>
    </item>
    
    <item>
      <title>pandas</title>
      <link>https://aavinash1083.github.io/mlnotes/python/pandas/pandas/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/pandas/pandas/</guid>
      <description>import pandas as pddf = pd.read_csv(&amp;#39;glass.csv&amp;#39;)df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    RI Na Mg Al Si K Ca Ba Fe Type     0 1.52101 13.64 4.49 1.10 71.78 0.06 8.75 0.00 0.0 1   1 1.51761 13.89 3.60 1.36 72.73 0.48 7.83 0.00 0.0 1   2 1.</description>
    </item>
    
    <item>
      <title>Python Multiplication</title>
      <link>https://aavinash1083.github.io/mlnotes/python/basics/python_multiplication/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/basics/python_multiplication/</guid>
      <description>print(2*2) 4  print(2) 2  </description>
    </item>
    
    <item>
      <title>Simple Python</title>
      <link>https://aavinash1083.github.io/mlnotes/python/basics/simple-python/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/basics/simple-python/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://aavinash1083.github.io/mlnotes/python/basics/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aavinash1083.github.io/mlnotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
  </channel>
</rss>